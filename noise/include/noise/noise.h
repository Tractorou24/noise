#pragma once

#include <cstdint>
#include <filesystem>
#include <random>

namespace noise
{
    /**
     * \brief Abstract class representing any noise that can be generated.
     */
    class noise
    {
    public:
        /**
         * \brief Creates a base generator using a \p seed.
         * \param seed The seed used to generate the noise.
         */
        explicit noise(const std::uint32_t seed)
            : m_seed(seed) {}

        virtual ~noise() = default;

        /**
         * \brief Generates the noise.
         * \param width The width of the noise to generate.
         * \param height The height of the noise to generate.
         * \param passes The number of passes (octaves) used when generating the noise.
         * \param grid_size The size of the grid used to generate the noise.
         *
         * It must save an internal state, so that the noise can be saved with \ref save() later.
         */
        virtual void generate(std::uint32_t width, std::uint32_t height, std::uint32_t passes, std::uint64_t grid_size) = 0;

        /**
         * \brief Saves the noise generated by te last call to \ref generate() to a file as an image.
         * \param path The path to save the noise to. The extension of the file will determine the format.
         *
         * This method may apply some value modifications in order to enhance the result (like contrast changes).
         * The supported file formats are currently determined by the noise implementation.
         *
         * \throws std::runtime_error if the file could not be saved or the extension is not supported.
         */
        virtual void save(const std::filesystem::path& path) = 0;

        /**
         * \brief Gets a random number of type `T` using the seed the noise generator was created with and a uniform distribution
         * \tparam T The type of number to generate.
         * \return A random number of type `T` in range `[0, 1]`.
         */
        template <typename T>
        [[nodiscard]] T random() const
        {
            static std::mt19937 generator(m_seed);
            static std::uniform_real_distribution<T> distribution;
            return distribution(generator);
        }

    private:
        std::uint32_t m_seed;
    };
}
